<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>utility file sender from instance to mid server. </description>
        <name>ScriptSender</name>
        <script><![CDATA[var ScriptSender = Class.create();

ScriptSender.prototype = {
   initialize : function() {
          this.debug = false;
      
      //If you would like to move processed files to a target location, set the next two parameters.
      //Make sure your file name ends up being unique. We will not overwrite a file by the same name
      //in the target directory...
      this.moveProcessedFiles = true;
      this.MIDSERVER_PROCESSED_FILE_PATH = "processed/";
      
      this.resLog = "FTP Log: n";
      this.log("InitializingtaRetriever");
      this.MIDSERVER_FILE_PATH = probe.getParameter('path')+'/';   
      this.MIDSERVER_FILE_NAME = probe.getParameter('targetFileName');
      
      this.Encoded_Data = probe.getParameter('encodedData');
      
      this.useProxy = this.getConfigParameter("mid.proxy.use_proxy");
      if (this.useProxy){
         this.proxyHost =this.getConfigParameter("mid.proxy.host");
         this.proxyPort =this.getConfigParameter("mid.proxy.port");
         this.proxyUser =this.getConfigParameter("mid.proxy.username");
         this.proxyPass =this.getConfigParameter("mid.proxy.password");
      }
      this.user = this.getConfigParameter("mid.instance.username");
      this.password = this.getConfigParameter("mid.instance.password");
      
      var ftpCredArr = this.decryptCredentials(probe.getParameter('ftpCred'));
      this.ftpUser = ftpCredArr[0];
      this.ftpPass = ftpCredArr[1];
      this.log('ftprname : '+ftpCredArr[0]);
      this.log('ftpsword : '+ftpCredArr[1]);
      this.ftpTargetServer = probe.getParameter('ftpTargetServer');
      this.ftpPort = (this.isANumber(probe.getParameter('ftpPort'))) ? (probe.getParameter('ftpPort')) : null;
      
      this.targetPath = probe.getParameter('targetPath');
      this.targetFileName = probe.getParameter('targetFileName');
      
      this.host = probe.getParameter('host');
      
      this.transportMethod = probe.getParameter('transportMethod');
      
       
   },
   
   getConfigParameter: function(parm){
      var m= Packages.com.service_now.mid.MIDServer.get();
      var config = m.getConfig();
      var res = config.getParameter(parm);
      var res2 = config.getProperty(parm);
      if (res){
         return res;
      }
      else if (res2){
         return res2;
      }
      else{
         config = Packages.com.service_now.mid.services.Config.get();
         return config.getProperty(parm);
      }
      
   },
   
   decryptCredentials: function(data) {
      var cred = new String(data);
      var e = new Packages.com.glide.util.Encrypter();
      
      var jsCred = cred + '';
      var usernamePass = e.decrypt(jsCred);
      var credArr = usernamePass.split(":", 2);
      return credArr;
   },
   
  saveToFile: function(data, targetPath) {
      var tmpLoc;
      try{
         if (this.transportMethod == "MID Server"){
            tmpLoc = targetPath;
         }
         else{
            tmpLoc = this.MIDSERVER_FILE_PATH + this.MIDSERVER_FILE_NAME;
         }
         var out = new Packages.java.io.PrintWriter(new Packages.java.io.FileWriter(tmpLoc));
		        var e = new Packages.com.glide.util.Encrypter();
		  
// 		  var x = new Packages.java.io.

  //       out.print(new GlideStringUtil().base64DecodeAsBytes(data));
//		  ms.log(new GlideStringUtil().base64DecodeAsBytes(data));
		  
		  out.print( data);
		 
// 		  ms.log(' testlog '+new Packages.com.glide.util.StringUtil().base64DecodeAsBytes(data));
         
         this.log("File saved to: " + tmpLoc);
      }
      catch(e){
         ms.log("Exception caught in SNDataRetriever->saveToFile: " + e.getMessage());
      }
	 // out.flush();
      out.close();
   },   
   
   execute: function() {
      var result = '';
     
      var pushRes = true;
      
      var saveRes = this.saveToFile(this.Encoded_Data, this.targetPath+ this.targetFileName);
      if(saveRes == true){
         pushRes = this.copyToFTP();
         result = "Sucess";
         //Move tmp file to a processed directory
         if (saveRes && pushRes && this.moveProcessedFiles){
            this.moveProcessedFile();
         }
      }
      else{
         result = "Failed";
         this.log("Thert was empty?");
      }
     return result;
   },
   
   type : "ScriptSender"
};
]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>hareeshhere</sys_created_by>
        <sys_created_on>2017-04-05 15:54:53</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>58fc73ffdb31f20043abfd441d961945</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>ScriptSender</sys_name>
        <sys_overrides/>
        <sys_package display_value="Automated Code Review" source="x_snc_automated_co">5501bca61315b240a5e739fed144b06d</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Automated Code Review">5501bca61315b240a5e739fed144b06d</sys_scope>
        <sys_update_name>ecc_agent_script_include_58fc73ffdb31f20043abfd441d961945</sys_update_name>
        <sys_updated_by>hareeshhere</sys_updated_by>
        <sys_updated_on>2017-04-05 16:35:36</sys_updated_on>
    </ecc_agent_script_include>
</record_update>
